package main  
import (  
   "fmt"  
   "time"  
   "sync"  
)  
var wg = sync.WaitGroup{}  
  
func main() {  
   wg.Add(2)  
   go fun1()  
   go fun2()  
   wg.Wait()  
}  
func fun1(){  
   for  i:=0;i<10;i++{  
      fmt.Println("fun1,  ->",i)  
      time.Sleep(time.Duration(5*time.Millisecond))  
   }  
   wg.Done()  
}  
func fun2(){  
   for i:=0;i<10;i++{  
      fmt.Println("fun2,  ->",i)  
      time.Sleep(time.Duration(10*time.Millisecond))  
   }  
   wg.Done()  
}  


fun2,  -> 0
fun1,  -> 0
fun1,  -> 1
fun2,  -> 1
fun1,  -> 2
fun1,  -> 3
fun1,  -> 4
fun2,  -> 2
fun1,  -> 5
fun1,  -> 6
fun2,  -> 3
fun1,  -> 7
fun1,  -> 8
fun2,  -> 4
fun1,  -> 9
fun2,  -> 5
fun2,  -> 6
fun2,  -> 7
fun2,  -> 8
fun2,  -> 9

Program exited.

2)

package main

import (
	"hash/fnv"
	"log"
	"math/rand"
	"os"
	"sync"
	"time"
)


var ph = []string{"jhansi", "suji", "navya", "madhavi", "ravi"}

const hunger = 3                
const think = time.Second / 100 
const eat = time.Second / 100   
var fmt = log.New(os.Stdout, "", 0)

var dining sync.WaitGroup

func diningProblem(phName string, dominantHand, otherHand *sync.Mutex) {
	fmt.Println(phName, "Seated")
	h := fnv.New64a()
	h.Write([]byte(phName))
	rg := rand.New(rand.NewSource(int64(h.Sum64())))
	rSleep := func(t time.Duration) {
		time.Sleep(t/2 + time.Duration(rg.Int63n(int64(t))))
	}
	for h := hunger; h > 0; h-- {
		fmt.Println(phName, "Hungry")
		dominantHand.Lock() 
		otherHand.Lock()
		fmt.Println(phName, "Eating")
		rSleep(eat)
		dominantHand.Unlock() 
		otherHand.Unlock()
		fmt.Println(phName, "Thinking")
		rSleep(think)
	}
	fmt.Println(phName, "Satisfied")
	dining.Done()
	fmt.Println(phName, "Left the table")
}

func main() {
	fmt.Println("Table empty")
	dining.Add(5)
	fork0 := &sync.Mutex{}
	forkLeft := fork0
	for i := 1; i < len(ph); i++ {
		forkRight := &sync.Mutex{}
		go diningProblem(ph[i], forkLeft, forkRight)
		forkLeft = forkRight
	}
	go diningProblem(ph[0], fork0, forkLeft)
	dining.Wait() 
	fmt.Println("Table empty")
}



Table empty
jhansi Seated
suji Seated
suji Hungry
jhansi Hungry
navya Seated
navya Hungry
ravi Seated
ravi Hungry
ravi Eating
madhavi Seated
madhavi Hungry
suji Eating
suji Thinking
ravi Thinking
jhansi Eating
madhavi Eating
suji Hungry
madhavi Thinking
navya Eating
jhansi Thinking
navya Thinking
suji Eating
ravi Hungry
ravi Eating
madhavi Hungry
navya Hungry
jhansi Hungry
ravi Thinking
madhavi Eating
suji Thinking
jhansi Eating
madhavi Thinking
navya Eating
ravi Hungry
jhansi Thinking
ravi Eating
navya Thinking
suji Hungry
suji Eating
madhavi Hungry
ravi Thinking
madhavi Eating
navya Hungry
jhansi Hungry
suji Thinking
jhansi Eating
ravi Satisfied
ravi Left the table
madhavi Thinking
navya Eating
suji Satisfied
suji Left the table
madhavi Satisfied
madhavi Left the table
jhansi Thinking
navya Thinking
jhansi Satisfied
jhansi Left the table
navya Satisfied
navya Left the table
Table empty

Program exited.

3)package main

import (
	"log"
	"math/rand"
	"sync"
	"time"
)

func worker(part string) {
	log.Println(part, "worker begins part")
	time.Sleep(time.Duration(rand.Int63n(1e6)))
	log.Println(part, "worker completes part")
	wg.Done()
}

var (
	partList    = []string{"jhansi", "suji", "navya", "madhavi"}
	nAssemblies = 3
	wg          sync.WaitGroup
)

func main() {
	rand.Seed(time.Now().UnixNano())
	for c := 1; c <= nAssemblies; c++ {
		log.Println("begin assembly cycle", c)
		wg.Add(len(partList))
		for _, part := range partList {
			go worker(part)
		}
		wg.Wait()
		log.Println("assemble.  cycle", c, "complete")
	}
}


2009/11/10 23:00:00 begin assembly cycle 1
2009/11/10 23:00:00 madhavi worker begins part
2009/11/10 23:00:00 suji worker begins part
2009/11/10 23:00:00 jhansi worker begins part
2009/11/10 23:00:00 navya worker begins part
2009/11/10 23:00:00 madhavi worker completes part
2009/11/10 23:00:00 navya worker completes part
2009/11/10 23:00:00 suji worker completes part
2009/11/10 23:00:00 jhansi worker completes part
2009/11/10 23:00:00 assemble.  cycle 1 complete
2009/11/10 23:00:00 begin assembly cycle 2
2009/11/10 23:00:00 madhavi worker begins part
2009/11/10 23:00:00 suji worker begins part
2009/11/10 23:00:00 jhansi worker begins part
2009/11/10 23:00:00 navya worker begins part
2009/11/10 23:00:00 suji worker completes part
2009/11/10 23:00:00 navya worker completes part
2009/11/10 23:00:00 jhansi worker completes part
2009/11/10 23:00:00 madhavi worker completes part
2009/11/10 23:00:00 assemble.  cycle 2 complete
2009/11/10 23:00:00 begin assembly cycle 3
2009/11/10 23:00:00 madhavi worker begins part
2009/11/10 23:00:00 navya worker begins part
2009/11/10 23:00:00 suji worker begins part
2009/11/10 23:00:00 jhansi worker begins part
2009/11/10 23:00:00 madhavi worker completes part
2009/11/10 23:00:00 jhansi worker completes part
2009/11/10 23:00:00 suji worker completes part
2009/11/10 23:00:00 navya worker completes part
2009/11/10 23:00:00 assemble.  cycle 3 complete

Program exited.

5)

package main

import (
	"fmt"
	"math/rand"
	"sync"
	"time"
)

const (
	paper = iota
	grass
	match
)

var smokeMap = map[int]string{
	paper: "paper",
	grass: "grass",
	match: "match",
}

var names = map[int]string{
	paper: "jhansi",
	grass: "suji",
	match: "navya",
}

type Table struct {
	paper chan int
	grass chan int
	match chan int
}

func arbitrate(t *Table, smokers [3]chan int) {
	for {
		time.Sleep(time.Millisecond * 500)
		next := rand.Intn(3)
		fmt.Printf("Table chooses %s: %s\n", smokeMap[next], names[next])
		switch next {
		case paper:
			t.grass <- 1
			t.match <- 1
		case grass:
			t.paper <- 1
			t.match <- 1
		case match:
			t.grass <- 1
			t.paper <- 1
		}
		for _, smoker := range smokers {
			smoker <- next
		}
		wg.Add(1)
		wg.Wait()
	}
}

func smoker(t *Table, name string, smokes int, signal chan int) {
	var chosen = -1
	for {
		chosen = <-signal // blocks

		if smokes != chosen {
			continue
		}

		fmt.Printf("Table: %d grass: %d match: %d\n", len(t.paper), len(t.grass), len(t.match))
		select {
		case <-t.paper:
		case <-t.grass:
		case <-t.match:
		}
		fmt.Printf("Table: %d grass: %d match: %d\n", len(t.paper), len(t.grass), len(t.match))
		time.Sleep(10 * time.Millisecond)
		select {
		case <-t.paper:
		case <-t.grass:
		case <-t.match:
		}
		fmt.Printf("Table: %d grass: %d match: %d\n", len(t.paper), len(t.grass), len(t.match))
		fmt.Printf("%s smokes a cigarette\n", name)
		time.Sleep(time.Millisecond * 500)
		wg.Done()
		time.Sleep(time.Millisecond * 100)
	}
}

const LIMIT = 1

var wg *sync.WaitGroup

func main() {
	wg = new(sync.WaitGroup)
	table := new(Table)
	table.match = make(chan int, LIMIT)
	table.paper = make(chan int, LIMIT)
	table.grass = make(chan int, LIMIT)
	var signals [3]chan int
	
	for i := 0; i < 3; i++ {
		signal := make(chan int, 1)
		signals[i] = signal
		go smoker(table, names[i], i, signal)
	}
	fmt.Printf("%s, %s, %s, sit with \n%s, %s, %s\n\n", names[0], names[1], names[2], smokeMap[0], smokeMap[1], smokeMap[2])
	arbitrate(table, signals)
}


jhansi, suji, navya, sit with 
paper, grass, match

Table chooses match: navya
Table: 1 grass: 1 match: 0
Table: 0 grass: 1 match: 0
Table: 0 grass: 0 match: 0
navya smokes a cigarette
Table chooses paper: jhansi
Table: 0 grass: 1 match: 1
Table: 0 grass: 0 match: 1
Table: 0 grass: 0 match: 0
jhansi smokes a cigarette
Table chooses match: navya
Table: 1 grass: 1 match: 0
Table: 1 grass: 0 match: 0
Table: 0 grass: 0 match: 0
navya smokes a cigarette
Table chooses match: navya
Table: 1 grass: 1 match: 0
Table: 1 grass: 0 match: 0
Table: 0 grass: 0 match: 0
navya smokes a cigarette